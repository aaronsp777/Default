#!/usr/bin/ruby

class Domain
  attr_accessor :name # string
  attr_accessor :count # int
  attr_accessor :subdomains  # recursive hash
  def initialize(name)
    @name = name
    @count = 0
    @subdomains = Hash.new { |h,k| h[k] = Domain.new(k) }
  end

  def add(subdomain = nil)
    if not subdomain.nil? 
      subdomains[subdomain].add
    end
    @count += 1
  end

  def to_s
    @subdomains.values.sort_by { |d| -d.count }.map do |d|
      d.count > 1 ? "#{d.name}(#{d.count})" : ""
    end.join(' ')
  end

end

$top = Hash.new { |h,k| h[k] = Domain.new(k) }

def parse_sub_domain(domain)
  l = domain.split('.')
  if l.length <= 2
    return nil, l.join('.')
  end
  if ['com','org','net','int','edu','gov','mil'].include? l[-1]
    return l[0..-3].join('.'), l[-2..-1].join('.')
  end
end

def parse_line(line)
  time, pkgtype, src, arrow, dest, num, q, subject, cnt = line.split
  dest.gsub!(/:$/, '')
  if /\+$/.match(num) # request
    sub, main = parse_sub_domain(subject)
    $top[main].add(sub)
  end
end

ARGV.each do |fn|
  File.open(fn, 'r') do |f|
    f.each_line { |l| parse_line(l) }
  end
end

$top.values.sort_by { |d| -d.count }.each do |d|
  if d.count > 1
    puts "#{d.name}(#{d.count}): #{d}"
  end
end
